// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
)

const aPIKeyValid = `-- name: APIKeyValid :one
SELECT COUNT(DISTINCT apikey) FROM users 
WHERE apikey=?
`

func (q *Queries) APIKeyValid(ctx context.Context, apikey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, aPIKeyValid, apikey)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createURL = `-- name: CreateURL :one
INSERT INTO urls (
  url, shorturl, userid, createdate
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, url, shorturl, userid, createdate
`

type CreateURLParams struct {
	Url        string
	Shorturl   string
	Userid     sql.NullInt64
	Createdate sql.NullInt64
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.Url,
		arg.Shorturl,
		arg.Userid,
		arg.Createdate,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Shorturl,
		&i.Userid,
		&i.Createdate,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  name, password, apikey
) VALUES (
  ?, ?, ?
)
`

type CreateUserParams struct {
	Name     string
	Password string
	Apikey   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Password, arg.Apikey)
	return err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls
WHERE id = ?
`

func (q *Queries) DeleteUrl(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUrl, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT apikey FROM users
WHERE name=? AND password=?
`

type GetAPIKeyParams struct {
	Name     string
	Password string
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, arg.Name, arg.Password)
	var apikey string
	err := row.Scan(&apikey)
	return apikey, err
}

const getHashPassword = `-- name: GetHashPassword :one
SELECT password FROM users
where name=?
`

func (q *Queries) GetHashPassword(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getHashPassword, name)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getLongURLFromShort = `-- name: GetLongURLFromShort :one
SELECT url FROM urls
WHERE shorturl = ? LIMIT 1
`

func (q *Queries) GetLongURLFromShort(ctx context.Context, shorturl string) (string, error) {
	row := q.db.QueryRowContext(ctx, getLongURLFromShort, shorturl)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getShortURLFromLong = `-- name: GetShortURLFromLong :one
SELECT shorturl FROM urls
WHERE url = ? LIMIT 1
`

func (q *Queries) GetShortURLFromLong(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, getShortURLFromLong, url)
	var shorturl string
	err := row.Scan(&shorturl)
	return shorturl, err
}

const getURL = `-- name: GetURL :one
SELECT shorturl FROM urls
WHERE url = ? LIMIT 1
`

func (q *Queries) GetURL(ctx context.Context, url string) (string, error) {
	row := q.db.QueryRowContext(ctx, getURL, url)
	var shorturl string
	err := row.Scan(&shorturl)
	return shorturl, err
}

const listURLs = `-- name: ListURLs :many
SELECT id, url, shorturl, userid, createdate FROM urls
ORDER BY url
`

func (q *Queries) ListURLs(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Shorturl,
			&i.Userid,
			&i.Createdate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
